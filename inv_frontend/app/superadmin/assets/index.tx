"use client"

import { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import SuperAdminLayout from "@/components/layout/superadmin-layout"
import { Button } from "@/components/ui/button"
import { NeonButton } from "@/components/ui/neon-button"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Search, Download, Filter, MoreHorizontal, BarChart, FileDown, Printer, FileText } from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import * as XLSX from "xlsx";
import ExcelJS from 'exceljs';
import { Badge } from "@/components/ui/badge"
import PivotTable from "@/components/superadmin/pivot-table"
import AdvancedFilter from "@/components/superadmin/advanced-filter"
import {
  useGetProductsQuery,
  useCreateProductsMutation,
  useUpdateProductsMutation,
  useDeleteProductsByIdMutation,
} from "@/lib/store/api/superAdmin/products/productsApi"
import type { Products } from "@/lib/store/api/superAdmin/products/productsApi"
// import { useToaster } from "@/lib/context/app-context"

// Filter options for advanced filtering
const filterOptions = [
  {
    id: "category",
    label: "Category",
    type: "select",
    options: [
      { value: "Computers", label: "Computers" },
      { value: "Furniture", label: "Furniture" },
      { value: "Software", label: "Software" },
      { value: "Office Equipment", label: "Office Equipment" },
      { value: "Networking", label: "Networking" },
    ],
    field: "category",
  },
  {
    id: "make",
    label: "Make",
    type: "select",
    options: [
      { value: "Dell", label: "Dell" },
      { value: "HP", label: "HP" },
      { value: "Apple", label: "Apple" },
      { value: "IKEA", label: "IKEA" },
      { value: "Herman Miller", label: "Herman Miller" },
      { value: "Adobe", label: "Adobe" },
      { value: "Microsoft", label: "Microsoft" },
      { value: "Epson", label: "Epson" },
      { value: "Cisco", label: "Cisco" },
      { value: "Ubiquiti", label: "Ubiquiti" },
      { value: "APC", label: "APC" },
      { value: "Steelcase", label: "Steelcase" },
    ],
    field: "make",
  },
  {
    id: "status",
    label: "Status",
    type: "select",
    options: [
      { value: "Active", label: "Active" },
      { value: "Maintenance", label: "Maintenance" },
      { value: "Retired", label: "Retired" },
    ],
    field: "status",
  },
  {
    id: "issuedTo",
    label: "Issued To",
    type: "select",
    options: [
      { value: "IT Department", label: "IT Department" },
      { value: "Admin Department", label: "Admin Department" },
      { value: "Design Team", label: "Design Team" },
      { value: "Meeting Rooms", label: "Meeting Rooms" },
      { value: "All Departments", label: "All Departments" },
    ],
    field: "issuedTo",
  },
  {
    id: "purchaseDate",
    label: "Purchase Date",
    type: "date",
    field: "purchaseDate",
  },
  {
    id: "quantity",
    label: "Quantity",
    type: "number",
    field: "Quantity",
  },
  {
    id: "rateIncludingTaxes",
    label: "Rate",
    type: "number",
    field: "rateIncludingTaxes",
  },
]

// Fields for pivot table
const pivotFields = {
  Category: "Category",
  Make: "Make",
  Model: "Model",
  Status: "Status",
  IssuedTo: "Issued To",
  VendorName: "Vendor",
  Quantity: "Quantity",
  RateIncludingTaxes: "Rate",
  PurchaseDate: "Purchase Date",
}

export default function Assets() {
  // const { addNotification } = useToaster()

  const { data: products,refetch:refetchCategoryList } = useGetProductsQuery(undefined, {
    refetchOnMountOrArgChange: true,
  });
  // console.log("products LIST:>>>>", products?.data)
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredAssets, setFilteredAssets] = useState<any>(products?.data);
  const [showPivot, setShowPivot] = useState(false)
  const [showAdvancedFilter, setShowAdvancedFilter] = useState(false)
  const [activeFilters, setActiveFilters] = useState<any[]>([])
  const tableRef = useRef<HTMLDivElement>(null)
  const allAssetsRef = useRef<any[]>([]);


  useEffect(() => {
    if (products?.data) {
      allAssetsRef.current = products.data;    // stable, never lost
      setFilteredAssets(products.data);        // for display
    }
  }, [products?.data]);


  useEffect(() => {
    applyFilters();
  }, [searchTerm, activeFilters]);



  function formatDate(dateString:any) {
    if (!dateString) {
      return "Invalid Date"; // Return an error message if the date is empty or undefined
    }
    
    const date = new Date(dateString);
    
    // Check if the date is invalid
    if (isNaN(date.getTime())) {
      return "Invalid Date"; // Return an error message if the date is invalid
    }
  
    const day = String(date.getDate()).padStart(2, '0'); // Ensure two digits for day
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Get month and pad if needed
    const year = date.getFullYear(); // Get the year
    
    return `${day}-${month}-${year}`;
  }
  

const applyFilters = () => {
  let data = allAssetsRef.current;

  if (searchTerm.trim()) {
    const lowerTerm = searchTerm.toLowerCase();
    data = data.filter((item: any) =>
      Object.values(item).some((value: any) =>
        String(value ?? "").toLowerCase().includes(lowerTerm)
      )
    );
  }

  if (activeFilters.length > 0) {
    data = data.filter((asset: any) =>
      activeFilters.every(({ field, operator, value }) => {
        const fieldVal = String(asset?.[field] ?? "").toLowerCase();
        const val = String(value ?? "").toLowerCase();

        switch (operator) {
          case "contains": return fieldVal.includes(val);
          case "equals": return fieldVal === val;
          case "startsWith": return fieldVal.startsWith(val);
          case "endsWith": return fieldVal.endsWith(val);
          case "notEquals": return fieldVal !== val;
          case "greaterThan": return Number(asset[field]) > Number(value);
          case "lessThan": return Number(asset[field]) < Number(value);
          case "before": return new Date(asset[field]) < new Date(value);
          case "after": return new Date(asset[field]) > new Date(value);
          default: return true;
        }
      })
    );
  }

  setFilteredAssets(data);
};


  const handleAdvancedFilterApply = (filters: any[]) => {
    setActiveFilters(filters)

    if (filters.length > 0) {
      // addNotification({
      //   message: `Applied ${filters.length} filter${filters.length > 1 ? "s" : ""}`,
      //   type: "success",
      // })
    } else {
      // addNotification({
      //   message: "All filters cleared",
      //   type: "info",
      // })
    }
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100"
      case "maintenance":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100"
      case "retired":
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100"
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100"
    }
  }

  // const exportToExcel = () => {
  //   // Create CSV content
  //   debugger
  //   const headers = [
  //     "UniqueId",
  //     "StartDate",
  //     "EndDate",
  //     "AssetName",
  //     "Category",
  //     "PurchaseDate",
  //     "Make",
  //     "Model",
  //     "SerialNumber",
  //     "InvoiceNumber",
  //     "Vendor",
  //     "Quantity",
  //     "Rate",
  //     "IssuedTo",
  //     "Status",
  //   ]
  //   console.log("filteredAssets", filteredAssets)
  //   const csvContent = [
  //     headers.join(","),
  //     ...filteredAssets?.map((asset:any,i:any) =>
  //       [
  //         asset.UniID,
  //         formatDate(asset.SessionStartDate),
  //         formatDate(asset.SessionEndDate),
  //         `"${asset.AssetName}"`,
  //         `"${asset.Category.name}"`,
  //          formatDate(asset.PurchaseDate),
  //         `"${asset.Make}"`,
  //         `"${asset.Model}"`,
  //         `"${asset.SerialNumber}"`,
  //         `"${asset.InvoiceNumber}"`,
  //         `"${asset.VendorName}"`,
  //         asset.Quantity,
  //         asset.RateIncludingTaxes,
  //         `"${asset.IssuedTo}"`,
  //         `"${asset.Status}"`,
  //       ].join(","),
  //     ),
  //   ].join("\n")

  //   // Create download link
  //   const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
  //   const url = URL.createObjectURL(blob)
  //   const link = document.createElement("a")
  //   link.setAttribute("href", url)
  //   link.setAttribute("download", "assets.csv")
  //   link.style.visibility = "hidden"
  //   document.body.appendChild(link)
  //   link.click()
  //   document.body.removeChild(link)
  // }

 
// const exportToExcel = () => {
//   const headers = [
//     "UniqueId",
//     "StartDate",
//     "EndDate",
//     "AssetName",
//     "Category",
//     "PurchaseDate",
//     "Make",
//     "Model",
//     "SerialNumber",
//     "InvoiceNumber",
//     "Vendor",
//     "Quantity",
//     "Rate",
//     "IssuedTo",
//     "Status",
//   ];

//   const rows = filteredAssets.map((asset: any) => [
//     asset.UniID,
//     formatDate(asset.SessionStartDate),
//     formatDate(asset.SessionEndDate),
//     asset.AssetName,
//     asset.Category?.name || "",
//     formatDate(asset.PurchaseDate),
//     asset.Make,
//     asset.Model,
//     asset.SerialNumber,
//     asset.InvoiceNumber,
//     asset.VendorName,
//     asset.Quantity,
//     asset.RateIncludingTaxes,
//     asset.IssuedTo,
//     asset.Status,
//   ]);

//   const data = [headers, ...rows];

//   const worksheet = XLSX.utils.aoa_to_sheet(data);

//   // Apply styles to header row (first row: A1 to O1)
//   headers.forEach((_, index) => {
//     const cellRef = XLSX.utils.encode_cell({ r: 0, c: index });
//     if (!worksheet[cellRef]) return;
//     worksheet[cellRef].s = {
//       fill: {
//         fgColor: { rgb: "D9E1F2" }, // Light blue
//       },
//       font: {
//         bold: true,
//         color: { rgb: "000000" },
//       },
//       alignment: {
//         horizontal: "center",
//         vertical: "center",
//       },
//     };
//   });

//   const workbook = XLSX.utils.book_new();
//   XLSX.utils.book_append_sheet(workbook, worksheet, "Assets");

//   XLSX.writeFile(workbook, "assets.xlsx");
// };





const exportToExcel = () => {
  debugger
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Inventory Data');

  worksheet.columns = [
    // { header: 'Session Date', key: 'session', width: 20 },
    { header: 'Starting Date', key: 'SessionStartDate', width: 20 },
    { header: 'Ending Date', key: 'SessionEndDate', width: 20 },
    { header: 'Unique Identity No', key: 'UniID', width: 25 },
    { header: 'Purchase Date', key: 'PurchaseDate', width: 20 },
    { header: 'Invoice Number', key: 'InvoiceNumber', width: 20 },
    { header: 'Asset Name', key: 'AssetName', width: 25 },
    { header: 'Make', key: 'Make', width: 20 },
    { header: 'Model', key: 'Model', width: 20 },
    {
      header: 'Product Serial Number',
      key: 'SerialNumber',
      width: 25,
    },
    { header: 'Vendor Name', key: 'VendorName', width: 25 },
    { header: 'Quantity', key: 'Quantity', width: 15 },
    { header: 'Rate (Including Taxes)', key: 'RateIncludingTaxes', width: 20 },
    { header: 'Category', key: 'category', width: 15 },
    { header: 'Similar Name', key: 'SimilarName', width: 20 },
    { header: 'Issued To', key: 'IssuedTo', width: 20 },
  ];
  // addAndCheckCategory(inventoryData, worksheet);


 // Add data rows
 const dataRows = filteredAssets?.map((asset: any) => ({
  SessionStartDate: formatDate(asset.SessionStartDate),
  SessionEndDate: formatDate(asset.SessionEndDate),
  UniID: asset.UniID,
  PurchaseDate: formatDate(asset.PurchaseDate),
  InvoiceNumber: asset.InvoiceNumber,
  AssetName: asset.AssetName,
  Make: asset.Make,
  Model: asset.Model,
  SerialNumber: asset.ProductSerialNumber || asset.SerialNumber,
  VendorName: asset.VendorName,
  Quantity: asset.Quantity,
  RateIncludingTaxes: asset.RateIncludingTaxes,
  category: asset.Category?.name,
  SimilarName: asset.SimilarName,
  IssuedTo: asset.IssuedTo,
}));

worksheet.addRows(dataRows);


  worksheet.getRow(1).eachCell((cell) => {
    cell.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'F4CCCC' },
    };
    cell.font = { bold: true };
    cell.alignment = { vertical: 'middle', horizontal: 'center' };
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' },
    };
  });

  worksheet.eachRow((row: ExcelJS.Row, rowNumber: number) => {
    row.eachCell((cell: ExcelJS.Cell) => {
      if (rowNumber !== 1) {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
        if (rowNumber % 2 === 0) {
          cell.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'CCFFFF' },
          };
        }
      }
    });
  });

  workbook.xlsx.writeBuffer().then((buffer: ArrayBuffer) => {
    const blob = new Blob([buffer], { type: 'application/octet-stream' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'inventory_data.xlsx';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  });
};





  return (
    <SuperAdminLayout>
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h1 className="text-2xl font-bold">Asset Management</h1>
          <div className="mt-4 flex space-x-2 sm:mt-0">
            <NeonButton
              variant="neon"
              size="sm"
              onClick={() => setShowAdvancedFilter(true)}
              className="flex items-center gap-1"
            >
              <Filter className="h-4 w-4" />
              Filter
              {activeFilters.length > 0 && (
                <Badge className="ml-1 h-5 w-5 p-0 flex items-center justify-center">{activeFilters.length}</Badge>
              )}
            </NeonButton>

            <NeonButton
              variant="neon"
              size="sm"
              onClick={() => setShowPivot(!showPivot)}
              className="flex items-center gap-1"
            >
              <BarChart className="h-4 w-4" />
              Pivot Table
            </NeonButton>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <NeonButton variant="neon" size="sm" className="flex items-center gap-1">
                  <Download className="h-4 w-4" />
                  Export
                </NeonButton>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="bg-card/90 backdrop-blur-md border-border/50">
                <DropdownMenuItem onClick={exportToExcel} className="cursor-pointer">
                  <FileDown className="mr-2 h-4 w-4" />
                  <span>Export to Excel</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        <AnimatePresence>
          {showPivot && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <PivotTable
                data={filteredAssets}
                title="Assets"
                initialRows="category"
                initialColumns="issuedTo"
                initialValues="quantity"
                fields={pivotFields}
                onClose={() => setShowPivot(false)}
              />
            </motion.div>
          )}
        </AnimatePresence>

        <Card>
          <CardHeader>
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <CardTitle>Asset Inventory</CardTitle>
              <div className="mt-4 sm:mt-0 relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search assets..."
                  className="pl-8 w-full sm:w-[300px]"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
            {activeFilters.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-2">
                {activeFilters.map((filter, index) => (
                  <Badge key={index} className="px-2 py-1 flex items-center gap-1" variant="outline">
                    {filter.label}
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-4 w-4 ml-1 p-0"
                      onClick={() => {
                        setActiveFilters(activeFilters.filter((_, i) => i !== index))
                      }}
                    >
                      {/* <X className="h-3 w-3" /> */}
                    </Button>
                  </Badge>
                ))}
                <Button variant="ghost" size="sm" className="h-6 px-2 text-xs" onClick={() => setActiveFilters([])}>
                  Clear All
                </Button>
              </div>
            )}
          </CardHeader>
          <CardContent>
            <div className="rounded-md border" ref={tableRef}>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead className="hidden lg:table-cell">StartDate</TableHead>
                    <TableHead className="hidden lg:table-cell">EndDate</TableHead>
                    <TableHead>Name</TableHead>
                    <TableHead className="hidden md:table-cell">Category</TableHead>
                    <TableHead className="hidden lg:table-cell">Make</TableHead>
                    <TableHead className="hidden lg:table-cell">Model</TableHead>
                    <TableHead className="hidden xl:table-cell">PurchaseDate</TableHead>
                    <TableHead className="hidden lg:table-cell">SerialNumber</TableHead>
                    <TableHead className="hidden lg:table-cell">VendorName</TableHead>
                    <TableHead className="hidden lg:table-cell">IssuedTo</TableHead>
                    <TableHead className="hidden lg:table-cell">Quantity</TableHead>
                    {/* <TableHead>Quantity</TableHead> */}
                    <TableHead className="hidden md:table-cell">Rate (₹)</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredAssets?.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={9} className="text-center py-8 text-muted-foreground">
                        No assets found
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredAssets?.map((asset:any,i:any) => (
                      <TableRow key={asset._id || i}>
                        {/* <TableCell>{i+1}</TableCell> */}
                        <TableCell>{asset.UniID}</TableCell>
                        <TableCell className="hidden lg:table-cell">{formatDate((asset as any)?.SessionStartDate)}</TableCell>
                        <TableCell className="hidden lg:table-cell">{formatDate((asset as any)?.SessionEndDate)}</TableCell>
                        <TableCell>{asset?.AssetName}</TableCell>
                        <TableCell className="hidden md:table-cell">{(asset as any)?.Category.name}</TableCell>
                        <TableCell className="hidden lg:table-cell">{(asset as any)?.Make}</TableCell>
                        <TableCell className="hidden lg:table-cell">{(asset as any)?.Model}</TableCell>
                        <TableCell className="hidden xl:table-cell">{ formatDate((asset as any)?.PurchaseDate)}</TableCell>
                        <TableCell className="hidden lg:table-cell">{(asset as any)?.ProductSerialNumber}</TableCell>
                        <TableCell className="hidden lg:table-cell">{(asset as any)?.VendorName}</TableCell>
                        <TableCell className="hidden lg:table-cell">{(asset as any)?.IssuedTo}</TableCell>
                        
                        <TableCell>{(asset as any)?.Quantity}</TableCell>
                        <TableCell className="hidden md:table-cell">{(asset as any).RateIncludingTaxes?.toLocaleString()}</TableCell>
                        <TableCell>
                          <Badge className={getStatusColor((asset as any).Status)}>{(asset as any).Status}</Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuItem>View Details</DropdownMenuItem>
                              <DropdownMenuItem>Edit Asset</DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem>Change Status</DropdownMenuItem>
                              <DropdownMenuItem>Transfer Asset</DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Advanced Filter Dialog */}
      <AdvancedFilter
        isOpen={showAdvancedFilter}
        onClose={() => setShowAdvancedFilter(false)}
        onApply={handleAdvancedFilterApply}
        filterOptions={[]}
        activeFilters={activeFilters}
      />
    </SuperAdminLayout>
  )
}


















































































add assets



"use client"

import type React from "react"

import { useEffect, useState } from "react"
import SuperAdminLayout from "@/components/layout/superadmin-layout"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Upload, FileUp, AlertCircle, CheckCircle2, Loader2 } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useBulkUploadProductsMutation, useCreateProductsMutation, useGetProductsQuery } from "@/lib/store/api/superAdmin/products/productsApi"
import { useGetCategoryQuery } from "@/lib/store/api/superAdmin/category/categoryApi"
// import { useToaster } from "@/lib/context/app-context"
import * as XLSX from "xlsx";
// Mock categories
// const categories = [
//   { id: "1", name: "Computers", type: "Tangible" },
//   { id: "2", name: "Furniture", type: "Tangible" },
//   { id: "3", name: "Software", type: "Intangible" },
//   { id: "4", name: "Office Equipment", type: "Tangible" },
// ]

export default function AddAsset() {
  const { data: categoryList ,refetch:refetchCategoryList } = useGetCategoryQuery(undefined, {
    refetchOnMountOrArgChange: true,
  });
console.log("CATEGORY LIST:>>>>", categoryList?.data)
  // const { addNotification } = useToaster()
  const [bulkUploadProducts, { isLoading: isBulkUploading }] = useBulkUploadProductsMutation();
  const [categories, setCategories] = useState<any[]>([]);

  const [formData, setFormData] = useState({
    UniID: "",
    PurchaseDate: "",
    InvoiceNumber: "",
    AssetName: "",
    Make: "",
    Model: "",
    ProductSerialNumber: "",
    SerialNumber: "",
    VendorName: "",
    Quantity: "",
    RateIncludingTaxes: "",
    SimilarName: "",
    Category: "",
    IssuedTo: "",
    SessionStartDate: "",
    SessionEndDate: "",
  })

  const [isSubmitting, setIsSubmitting] = useState(false)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState("")
  const [file, setFile] = useState<File | null>(null)
  const [fileData, setFileData] = useState<any[]>([])
  const [isProcessing, setIsProcessing] = useState(false)
  const [importSuccess, setImportSuccess] = useState(false)
  const [createProduct, { isLoading, isSuccess }] =  useCreateProductsMutation();

const {  refetch } = useGetProductsQuery();


useEffect(() => {
  if (categoryList?.data) {
    setCategories(categoryList.data);
  }
}, [categoryList]);



  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    debugger
    e.preventDefault()
    setIsSubmitting(true)
    setSuccess(false)
    setError("")

    try {
      // Map formData to API payload structure
      const payload:any = {
        UniID: formData.UniID,
        PurchaseDate: formData.PurchaseDate ? new Date(formData.PurchaseDate) : undefined,
        InvoiceNumber: formData.InvoiceNumber,
        AssetName: formData.AssetName,
        Model: formData.Model,
        Make: formData.Make,
        ProductSerialNumber: formData.SerialNumber,
        VendorName: formData.VendorName,
        Quantity: Number(formData.Quantity),
        RateIncludingTaxes: Number(formData.RateIncludingTaxes),
        SimilarName: formData.SimilarName,
        Category: formData.Category,
        IssuedTo: formData.IssuedTo,
        SessionStartDate: formData.SessionStartDate ? new Date(formData.SessionStartDate) : undefined,
        SessionEndDate: formData.SessionEndDate ? new Date(formData.SessionEndDate) : undefined,
      }
      await createProduct(payload).unwrap()
      setFormData({
        UniID: "",
        PurchaseDate: "",
        InvoiceNumber: "",
        AssetName: "",
        Make: "",
        Model: "",
        ProductSerialNumber: "",
        SerialNumber: "",
        VendorName: "",
        Quantity: "",
        RateIncludingTaxes: "",
        SimilarName: "",
        Category: "",
        IssuedTo: "",
        SessionStartDate: "",
        SessionEndDate: "",
      })
      setSuccess(true)
      refetch()
    } catch (err) {
      setError("Failed to add asset. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }


  // const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  //   const selectedFile = e.target.files?.[0]
  //   if (selectedFile) {
  //     setFile(selectedFile)
  //     // In a real app, you would parse the Excel file here
  //     // For demo purposes, we'll simulate parsing after a delay
  //     setIsProcessing(true)
  //     setTimeout(() => {
  //       // Mock data that would come from the Excel file
  //       const mockExcelData:any = [
  //         {
  //           UniID: "A123",
  //           PurchaseDate: "2023-06-15",
  //           InvoiceNumber: "INV-001",
  //           AssetName: "Dell Laptop",
  //           Make: "Dell",
  //           model: "Latitude 5420",
  //           serialNumber: "DL5420-001",
  //           vendorName: "Dell Technologies",
  //           quantity: "5",
  //           rate: "85000",
  //           category: "1", // Computers
  //         },
  //         {
  //           UniID: "A124",
  //           PurchaseDate: "2023-06-15",
  //           InvoiceNumber: "INV-002",
  //           AssetName: "HP Monitor",
  //           Make: "HP",
  //           Model: "24f",
  //           SerialNumber: "HP24F-002",
  //           VendorName: "HP Inc.",
  //           Quantity: "10",
  //           RateIncludingTaxes: "15000",
  //           Category: "4", // Office Equipment
  //         },
  //         {
  //           UniID: "A125",
  //           PurchaseDate: "2023-06-15",
  //           InvoiceNumber: "INV-003",
  //           AssetName: "Office Chair",
  //           Make: "Herman Miller",
  //           Model: "Aeron",
  //           SerialNumber: "HM-ARN-003",
  //           VendorName: "Herman Miller",
  //           Quantity: "15",
  //           RateIncludingTaxes: "35000",
  //           Category: "2", // Furniture
  //         },
  //       ]

  //       setFileData(mockExcelData)
  //       setIsProcessing(false)
  //     }, 2000)
  //   }
  // }

// function reverseFormatDate(dateString: string): string {
//   if (!dateString) {
//     return "Invalid Date";
//   }

//   const [day, month, year] = dateString.split('-');
//   if (!day || !month || !year) {
//     return "Invalid Date";
//   }

//   const isoDate = new Date(`${year}-${month}-${day}T00:00:00.000Z`);

//   // Validate the created date
//   if (isNaN(isoDate.getTime())) {
//     return "Invalid Date";
//   }

//   return isoDate.toISOString(); // returns in ISO format e.g. 2025-05-31T00:00:00.000Z
// }




  // const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
  //   debugger
  //   const selectedFile = e.target.files?.[0];
  //   if (!selectedFile) return;
  
  //   setFile(selectedFile);
  //   setIsProcessing(true);
  
  //   const reader = new FileReader();
  
  //   reader.onload = async (event) => {
  //     try {
  //       const data = new Uint8Array(event.target?.result as ArrayBuffer);
  //       const workbook = XLSX.read(data, { type: 'array' });
  //       const sheetName = workbook.SheetNames[0];
  //       const worksheet = workbook.Sheets[sheetName];
  
  //       const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
  
  //       const formattedData:any = (jsonData as any[]).map((row) => ({
  //         UniID: row['Unique Identity No'] || row.UniID,
  //         PurchaseDate: row['Purchase Date'] || '',
  //         InvoiceNumber: row['Invoice Number'] || '',
  //         AssetName: row['Asset Name'] || '',
  //         Make: row['Make'] || '',
  //         Model: row['Model'] || '',
  //         SerialNumber: row['Product Serial Number'] || '',
  //         VendorName: row['Vendor Name'] || '',
  //         Quantity: row['Quantity'] || '',
  //         RateIncludingTaxes: row['Rate (Including Taxes)'] || '',
  //         Category: row['Category'] || '',
  //         IssuedTo: row['Issued To'] || '',
  //       }));
  
  //       setFileData(formattedData);
  
  //       // 🔥 Bulk upload using RTK mutation
  //       await bulkUploadProducts(formattedData).unwrap();
  
  //       alert('All assets uploaded successfully.');
  //     } catch (err) {
  //       console.error('Upload failed:', err);
  //       alert('Failed to upload some or all assets.');
  //     } finally {
  //       setIsProcessing(false);
  //     }
  //   };
  
  //   reader.readAsArrayBuffer(selectedFile);
  // };


  const reverseFormatDate = (dateString: string): string => {
    debugger
    const [day, month, year] = dateString.split('-');
    if (!day || !month || !year) return '';
    const isoDate = new Date(`${year}-${month}-${day}T00:00:00.000Z`);
    return isNaN(isoDate.getTime()) ? '' : isoDate.toISOString();
  };
  
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    debugger
    const selectedFile = e.target.files?.[0];
    if (!selectedFile) return;
  
    setIsProcessing(true);
    setFile(selectedFile);
  
    const reader = new FileReader();
  
    reader.onload = async (event) => {
      try {
        const data = new Uint8Array(event.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: 'array' });
        const worksheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
  
        const formattedData:any = (jsonData as any[]).map((row) => ({
          SessionStartDate: reverseFormatDate(row['Starting Date']),
          SessionEndDate: reverseFormatDate(row['Ending Date']),
          UniID: row['Unique Identity No'],
          PurchaseDate: reverseFormatDate(row['Purchase Date']),
          InvoiceNumber: row['Invoice Number'],
          AssetName: row['Asset Name'],
          Make: row['Make'],
          Model: row['Model'],
          ProductSerialNumber: row['Product Serial Number'] || row['SerialNumber'],
          VendorName: row['Vendor Name'],
          Quantity: Number(row['Quantity']),
          RateIncludingTaxes: Number(row['Rate (Including Taxes)']),
          Category: row['Category'],
          SimilarName: row['Similar Name'],
          IssuedTo: row['Issued To'],
        }));
  
        setFileData(formattedData);
  
        // 🔥 Send to backend
        // await bulkUploadProducts(formattedData).unwrap();
     console.log("bulk upload DATA:>>>>", formattedData)
        alert('Excel data uploaded successfully!');
      } catch (err) {
        console.error('Upload error:', err);
        alert('Failed to upload Excel data.');
      } finally {
        setIsProcessing(false);
      }
    };
  
    reader.readAsArrayBuffer(selectedFile);
  };
  







  // const handleBulkImport = async () => {
  //   if (fileData.length === 0) return

  //   setIsSubmitting(true)
  //   setImportSuccess(false)
  //   setError("")

  //   try {
  //     // Map each item to the API payload structure and call createProduct for each
  //     await Promise.all(
  //       fileData?.map(async (item) => {
  //         const payload:any = {
  //           UniID: item.UniID,
  //           PurchaseDate: item.PurchaseDate ? new Date(item.PurchaseDate) : undefined,
  //           InvoiceNumber: item.InvoiceNumber,
  //           AssetName: item.AssetName,
  //           MakeModel: item.Make + (item.Model ? ` ${item.Model}` : ""),
  //           ProductSerialNumber: item.SerialNumber,
  //           VendorName: item.VendorName,
  //           Quantity: Number(item.Quantity),
  //           RateIncludingTaxes: Number(item.RateIncludingTaxes),
  //           SimilarName: item.SimilarName,
  //           SerialNumber: item.SerialNumber,
  //           Category: item.Category,
  //           IssuedTo: item.IssuedTo,
  //           SessionStartDate: item.SessionStartDate ? new Date(item.SessionStartDate) : undefined,
  //           SessionEndDate: item.SessionEndDate ? new Date(item.SessionEndDate) : undefined,
  //         }
  //         await createProduct(payload).unwrap()
  //       })
  //     )
  //     console.log("FILE DATA:>>>>", fileData)
  //     setImportSuccess(true)
  //     setFile(null)
  //     setFileData([])
  //     refetch()
  //   } catch (err) {
  //     setError("Failed to import assets. Please try again.")
  //   } finally {
  //     setIsSubmitting(false)
  //   }
  // }







  // const handleFileUpload = async (event:any) => {
  
  //   const file = event.target.files?.[0]; // Get uploaded file
  //   setSelectedFile(file);
  //     if (!file) {
  //       alert('Please upload a valid Excel file.');
  //       return;
  //     }
    
  //     try {
  //       const reader = new FileReader();
        
  //       reader.onload = async (e) => {
  //         const data = e.target?.result;
  //         const workbook = XLSX.read(data, { type: 'binary' });
  //         const sheetName = workbook.SheetNames[0];
  //         const sheet = workbook.Sheets[sheetName];
  //         let jsonData = XLSX.utils.sheet_to_json(sheet);
  //         let convertData=convertJsonToModelData(jsonData)
  //         let isCategory=addAndCheckCategory(convertData)
  //         console.log('Parsed Excel Data:', convertData);
  //         console.log('Parsed Excel Data:', isCategory);
  //           try {
  //             await createProduct(isCategory).unwrap();
  //             console.log('Product uploaded successfully:', isCategory);
  //             alert('File uploaded and processed successfully!');
  //             setFormData([{}])
  //             refetch()
  //           } catch (error) {
  //             console.error('Error uploading product:', error);
  //           }
  //       };
    
  //       reader.readAsBinaryString(file);
  //     } catch (error) {
  //       console.error('Error uploading file:', error);
  //       alert('An error occurred while uploading the file.');
  //     }
  //   };
    
  //   const handleUploadClick = () => {
  //     if (!selectedFile) {
  //       alert("Please select a file first!");
  //       return;
  //     }
  //   };



  return (
    <SuperAdminLayout>
      <div className="space-y-6">
        <h1 className="text-2xl font-bold">Add New Asset</h1>

        {success && (
          <Alert className="bg-green-50 border-green-200">
            <CheckCircle2 className="h-4 w-4 text-green-600" />
            <AlertTitle className="text-green-600">Success</AlertTitle>
            <AlertDescription className="text-green-600">Asset has been added successfully.</AlertDescription>
          </Alert>
        )}

        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Tabs defaultValue="single">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="single">Single Asset</TabsTrigger>
            <TabsTrigger value="bulk">Bulk Import</TabsTrigger>
          </TabsList>

          <TabsContent value="single">
            <Card>
              <CardHeader>
                <CardTitle>Asset Information</CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium mb-4">Basic Details</h3>
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                      <div className="space-y-2">
                        <Label htmlFor="uniqueId">Unique ID</Label>
                        <Input
                          id="UniID"
                          name="UniID"
                          value={formData.UniID}
                          onChange={handleChange}
                          required
                        />
                      </div>

 <div 
  className="space-y-2 cursor-pointer" 
  onClick={() => {
    const element = document.getElementById("PurchaseDate") as HTMLInputElement;
    if (element) {
      try {
        element.showPicker();
      } catch {
        element.focus(); // Fallback for older browsers
      }
    }
  }}
>
  <Label htmlFor="PurchaseDate">Purchase Date</Label>
  <Input
    id="PurchaseDate"
    name="PurchaseDate"
    type="date"
    value={formData.PurchaseDate}
    onChange={handleChange}
    required
  />
</div> 





                      <div className="space-y-2">
                        <Label htmlFor="invoiceNumber">Invoice Number</Label>
                        <Input
                          id="InvoiceNumber"
                          name="InvoiceNumber"
                          value={formData.InvoiceNumber}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="assetName">Asset Name</Label>
                        <Input
                          id="AssetName"
                          name="AssetName"
                          value={formData.AssetName}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="Make">Make</Label>
                        <Input id="Make" name="Make" value={formData.Make} onChange={handleChange} required />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="Model">Model</Label>
                        <Input id="Model" name="Model" value={formData.Model} onChange={handleChange} required />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="serialNumber">Serial Number</Label>
                        <Input
                          id="SerialNumber"
                          name="SerialNumber"
                          value={formData.SerialNumber}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="vendorName">Vendor Name</Label>
                        <Input
                          id="VendorName"
                          name="VendorName"
                          value={formData.VendorName}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="quantity">Quantity</Label>
                        <Input
                          id="Quantity"
                          name="Quantity"
                          type="number"
                          min="1"
                          value={formData.Quantity}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="rate">Rate (Including Taxes)</Label>
                        <Input
                          id="RateIncludingTaxes"
                          name="RateIncludingTaxes"
                          type="number"
                          min="0"
                          step="0.01"
                          value={formData.RateIncludingTaxes}
                          onChange={handleChange}
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="similarName">Similar Name</Label>
                        <Input
                          id="SimilarName"
                          name="SimilarName"
                          value={formData.SimilarName}
                          onChange={handleChange}
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="Category">Category</Label>
                        <Select
                          value={formData.Category}
                          onValueChange={(value) => handleSelectChange("Category", value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select category" />
                          </SelectTrigger>
                          <SelectContent>
                            {categories?.map((category:any) => (
                              <SelectItem key={category._id} value={category._id}>
                                {category?.name} ({category?.type})
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Allocation Details</h3>
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                      <div className="space-y-2">
                        <Label htmlFor="IssuedTo">Issued To</Label>
                        <Input id="IssuedTo" name="IssuedTo" value={formData.IssuedTo} onChange={handleChange} />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="SessionStartDate">Session Start Date</Label>
                        <Input
                          id="SessionStartDate"
                          name="SessionStartDate"
                          type="date"
                          value={formData.SessionStartDate}
                          onChange={handleChange}
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="SessionEndDate">Session End Date</Label>
                        <Input
                          id="SessionEndDate"
                          name="SessionEndDate"
                          type="date"
                          value={formData.SessionEndDate}
                          onChange={handleChange}
                        />
                      </div>
                    </div>
                  </div>

                  <Button type="submit" className="mt-4" disabled={isSubmitting}>
                    {isSubmitting ? "Adding..." : "Add Asset"}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="bulk">
            <Card>
              <CardHeader>
                <CardTitle>Bulk Import Assets</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="space-y-4">
                    <div className="flex flex-col items-center justify-center border-2 border-dashed border-border/50 rounded-lg p-12">
                      <Upload className="h-12 w-12 text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium">Upload Excel File</h3>
                      <p className="text-sm text-muted-foreground mb-4 text-center">
                        Upload an Excel file (.xlsx) with asset information.
                        <br />
                        {/* <a href="#" className="text-primary hover:underline">
                          Download template
                        </a> */}
                      </p>
                      <label htmlFor="file-upload" className="cursor-pointer">
                        <div className="bg-primary/10 text-primary border border-primary/30 shadow-[0_0_10px_rgba(var(--primary-rgb),0.3)] hover:shadow-[0_0_15px_rgba(var(--primary-rgb),0.5)] hover:bg-primary/20 px-4 py-2 rounded-md flex items-center">
                          <FileUp className="mr-2 h-4 w-4" />
                          <span>Select File</span>
                        </div>
                        <input
                          id="file-upload"
                          type="file"
                          accept=".xlsx, .xls"
                          className="hidden"
                          onChange={handleFileChange}
                          disabled={isProcessing || isSubmitting}
                        />
                      </label>
                    </div>

                    {isProcessing && (
                      <div className="flex flex-col items-center justify-center p-4">
                        <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
                        <p className="text-sm text-muted-foreground">Processing file...</p>
                      </div>
                    )}

                    {/* {fileData.length > 0 && !isProcessing && (
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium">Preview ({fileData.length} assets)</h3>
                        <div className="border rounded-lg overflow-auto max-h-96">
                          <table className="min-w-full divide-y divide-border">
                            <thead className="bg-muted/50">
                              <tr>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  ID
                                </th>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  Name
                                </th>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  Make
                                </th>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  Model
                                </th>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  Quantity
                                </th>
                                <th className="px-4 py-2 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">
                                  Rate
                                </th>
                              </tr>
                            </thead>
                            <tbody className="bg-card divide-y divide-border">
                              {fileData.map((item, index) => (
                                <tr key={index} className={index % 2 === 0 ? "bg-muted/20" : ""}>
                                  <td className="px-4 py-2 text-sm">{item.UniID}</td>
                                  <td className="px-4 py-2 text-sm">{item.AssetName}</td>
                                  <td className="px-4 py-2 text-sm">{item.Make}</td>
                                  <td className="px-4 py-2 text-sm">{item.Model}</td>
                                  <td className="px-4 py-2 text-sm">{item.Quantity}</td>
                                  <td className="px-4 py-2 text-sm">{item.RateIncludingTaxes}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>

                        <div className="flex justify-end space-x-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              setFile(null)
                              setFileData([])
                            }}
                            disabled={isSubmitting}
                          >
                            Cancel
                          </Button>
                          <Button 
                          // onClick={handleBulkImport} 
                          disabled={isSubmitting}>
                            {isSubmitting ? (
                              <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Importing...
                              </>
                            ) : (
                              "Import Assets"
                            )}
                          </Button>
                        </div>
                      </div>
                    )} */}

                    {importSuccess && (
                      <Alert className="bg-green-50 border-green-200">
                        <CheckCircle2 className="h-4 w-4 text-green-600" />
                        <AlertTitle className="text-green-600">Success</AlertTitle>
                        <AlertDescription className="text-green-600">
                          Assets have been imported successfully.
                        </AlertDescription>
                      </Alert>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </SuperAdminLayout>
  )
}


