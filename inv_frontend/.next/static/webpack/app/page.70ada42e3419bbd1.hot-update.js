"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/utils/api.util.ts":
/*!*******************************!*\
  !*** ./lib/utils/api.util.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchbase: () => (/* binding */ fetchbase)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(app-pages-browser)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\");\n/* harmony import */ var async_mutex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-mutex */ \"(app-pages-browser)/./node_modules/async-mutex/index.mjs\");\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store */ \"(app-pages-browser)/./lib/store/index.tsx\");\n/* harmony import */ var _store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/slices/auth.slice */ \"(app-pages-browser)/./lib/store/slices/auth.slice.ts\");\n// import {\n//   BaseQueryFn,\n//   FetchArgs,\n//   fetchBaseQuery,\n//   FetchBaseQueryError,\n// } from \"@reduxjs/toolkit/query\";\n// // import { toast } from \"react-toastify\";\n// import { Mutex } from \"async-mutex\";\n// // import { apiBaseUrl } from \"../components/consts/ApiUriConst\";\n// import store from \"../store\";\n// import { authenticationSlice } from \"../store/slices/auth.slice\";\n// const mutex = new Mutex();\n// const apiBaseUrl=\"http://localhost:5000\"\n// const baseUrl = `${apiBaseUrl}`;\n// const baseQuery = fetchBaseQuery({\n//   baseUrl,\n//   prepareHeaders: (headers, { getState }) => {\n//     // Try Redux state first, then fallback to localStorage\n//     let token: string | null = (getState as typeof store.getState)().authentication?.token;\n//     if (!token && typeof window !== \"undefined\") {\n//       token = localStorage.getItem(\"token\");\n//     }\n//     if (typeof token === 'string' && token) {\n//       headers.set(\"Authorization\", `Bearer ${token}`);\n//     }\n//     return headers;\n//   },\n// });\n// export const fetchbase: BaseQueryFn<\n//   string | FetchArgs,\n//   unknown,\n//   FetchBaseQueryError\n// > = async (args, api, extraOptions) => {\n//   debugger\n//   // wait until the mutex is available without locking it\n//   await mutex.waitForUnlock();\n//   let result = await baseQuery(args, api, extraOptions);\n//   if (result?.error && result.error.status === 401) {\n//     // checking whether the mutex is locked\n//     // localStorage.removeItem(\"authenticationToken\");\n//     localStorage.removeItem(\"token\")\n//     store.dispatch(authenticationSlice.actions.logout());\n//     if (!mutex.isLocked()) {\n//     } else {\n//       // wait until the mutex is available without locking it\n//       await mutex.waitForUnlock();\n//       result = await baseQuery(args, api, extraOptions);\n//     }\n//   } else if (result.error && result.error.status) {\n//     let msg = getFirstErrorFromObject(result.error.data);\n//     if (!msg) {\n//       msg = `Error ${result.error.status}: Unknown error`;\n//     }\n//     if (!(result.error.data instanceof Blob)) {\n//       // toast.error(msg);\n//       console.error(msg);\n//     }\n//     // Always return a consistent error object\n//     return { error: msg, status: result.error.status };\n//   }\n//   return result;\n// };\n// function getFirstErrorFromObject(obj: any) {\n//   if (obj?.detail) {\n//     if (Array.isArray(obj.detail)) {\n//       const eItem = obj.detail[0];\n//       if (eItem) {\n//         return `${eItem.msg}`;\n//       }\n//     } else if (obj.detail) {\n//       return obj.detail.toString();\n//     }\n//   }\n// }\n\n\n\n\n// Base URL\nconst apiBaseUrl = \"http://localhost:5000\";\nconst baseUrl = \"\".concat(apiBaseUrl);\n// Mutex to handle concurrent requests\nconst mutex = new async_mutex__WEBPACK_IMPORTED_MODULE_0__.Mutex();\n// const { addNotification } = useToaster()\nconst baseQuery = (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fetchBaseQuery)({\n    baseUrl,\n    prepareHeaders: (headers, param)=>{\n        let { getState } = param;\n        var _getState_authentication;\n        let token = (_getState_authentication = getState().authentication) === null || _getState_authentication === void 0 ? void 0 : _getState_authentication.token;\n        // Fallback to localStorage\n        if (!token && \"object\" !== \"undefined\") {\n            token = localStorage.getItem(\"token\");\n        }\n        if (token) {\n            headers.set(\"Authorization\", \"Bearer \".concat(token));\n        }\n        return headers;\n    }\n});\n/**\n * Centralized Error Handling Function\n */ const handleError = (errorData, status)=>{\n    let errorMessage = \"An unknown error occurred.\";\n    if (errorData) {\n        if (errorData.detail) {\n            if (Array.isArray(errorData.detail)) {\n                var _errorData_detail_;\n                errorMessage = ((_errorData_detail_ = errorData.detail[0]) === null || _errorData_detail_ === void 0 ? void 0 : _errorData_detail_.msg) || errorMessage;\n            } else {\n                errorMessage = errorData.detail.toString();\n            }\n        } else if (typeof errorData === \"string\") {\n            errorMessage = errorData;\n        }\n    }\n    // console.error(`Error ${status}: ${errorMessage}`);\n    // addNotification({\n    //   message: `${errorMessage}`,\n    //   type: \"error\",\n    // })\n    // Dispatch error notification without blocking UI\n    setTimeout(()=>{\n        _store__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dispatch(_store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__.authenticationSlice.actions.setError({\n            message: errorMessage,\n            status\n        }));\n    }, 0);\n    return {\n        error: errorMessage,\n        status\n    };\n};\n/**\n * Enhanced BaseQuery with Mutex and Centralized Error Handling\n */ const fetchbase = async (args, api, extraOptions)=>{\n    await mutex.waitForUnlock(); // Ensure mutex is available\n    let result = await baseQuery(args, api, extraOptions);\n    if (result.error) {\n        const { status, data } = result.error;\n        if (status === 401) {\n            localStorage.removeItem(\"token\");\n            _store__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dispatch(_store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__.authenticationSlice.actions.logout());\n            if (!mutex.isLocked()) {\n                await mutex.waitForUnlock();\n                result = await baseQuery(args, api, extraOptions);\n            }\n        }\n        // Handle other errors centrally\n        return handleError(data, status);\n    }\n    return result;\n}; // import {\n //   BaseQueryFn,\n //   FetchArgs,\n //   fetchBaseQuery,\n //   FetchBaseQueryError,\n //   BaseQueryApi,\n //   FetchBaseQueryMeta,\n // } from \"@reduxjs/toolkit/query\";\n // import { Mutex } from \"async-mutex\";\n // import store from \"../store\";\n // import { authenticationSlice } from \"../store/slices/auth.slice\";\n // // import { addNotificationExternal } from \"../utils/toast-external\";\n // import { useToaster } from \"../context/use-toaster\";\n // const apiBaseUrl = \"http://localhost:5000\";\n // const baseUrl = `${apiBaseUrl}`;\n // const mutex = new Mutex();\n // const { addNotification } = useToaster()\n // const baseQuery = fetchBaseQuery({\n //   baseUrl,\n //   prepareHeaders: (headers, { getState }) => {\n //     let token: string | null = (getState as typeof store.getState)().authentication?.token;\n //     if (!token && typeof window !== \"undefined\") {\n //       token = localStorage.getItem(\"token\");\n //     }\n //     if (token) {\n //       headers.set(\"Authorization\", `Bearer ${token}`);\n //     }\n //     return headers;\n //   },\n // });\n // const handleError = (errorData: any, status: number) => {\n //   let errorMessage = \"An unknown error occurred.\";\n //   if (errorData) {\n //     if (errorData.detail) {\n //       if (Array.isArray(errorData.detail)) {\n //         errorMessage = errorData.detail[0]?.msg || errorMessage;\n //       } else {\n //         errorMessage = errorData.detail.toString();\n //       }\n //     } else if (typeof errorData === \"string\") {\n //       errorMessage = errorData;\n //     }\n //   }\n //   console.error(`Error ${status}: ${errorMessage}`, errorData);\n //   addNotification({\n //     message: errorMessage,\n //     type: \"error\",\n //   });\n //   store.dispatch(authenticationSlice.actions.setError({ message: errorMessage, status }));\n //   // Return error in correct shape expected by RTK Query\n //   return {\n //     error: {\n //       status,\n //       data: errorData ?? errorMessage,\n //     } as FetchBaseQueryError,\n //   };\n // };\n // export const fetchbase: BaseQueryFn<\n //   string | FetchArgs,\n //   unknown,\n //   FetchBaseQueryError\n // > = async (args, api, extraOptions) => {\n //   await mutex.waitForUnlock();\n //   let result = await baseQuery(args, api, extraOptions);\n //   if (result.error) {\n //     const { status, data } = result.error;\n //     if (status === 401) {\n //       localStorage.removeItem(\"token\");\n //       store.dispatch(authenticationSlice.actions.logout());\n //       if (!mutex.isLocked()) {\n //         await mutex.waitForUnlock();\n //         result = await baseQuery(args, api, extraOptions);\n //       }\n //     }\n //     return handleError(data, status as number);\n //   }\n //   return result;\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils/api.util.ts\n"));

/***/ })

});