"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/superadmin/dashboard/page",{

/***/ "(app-pages-browser)/./lib/utils/api.util.ts":
/*!*******************************!*\
  !*** ./lib/utils/api.util.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchbase: () => (/* binding */ fetchbase)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit/query */ \"(app-pages-browser)/./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs\");\n/* harmony import */ var async_mutex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-mutex */ \"(app-pages-browser)/./node_modules/async-mutex/index.mjs\");\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../store */ \"(app-pages-browser)/./lib/store/index.tsx\");\n/* harmony import */ var _store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/slices/auth.slice */ \"(app-pages-browser)/./lib/store/slices/auth.slice.ts\");\n// import {\n//   BaseQueryFn,\n//   FetchArgs,\n//   fetchBaseQuery,\n//   FetchBaseQueryError,\n// } from \"@reduxjs/toolkit/query\";\n// // import { toast } from \"react-toastify\";\n// import { Mutex } from \"async-mutex\";\n// // import { apiBaseUrl } from \"../components/consts/ApiUriConst\";\n// import store from \"../store\";\n// import { authenticationSlice } from \"../store/slices/auth.slice\";\n// const mutex = new Mutex();\n// const apiBaseUrl=\"http://localhost:5000\"\n// const baseUrl = `${apiBaseUrl}`;\n// const baseQuery = fetchBaseQuery({\n//   baseUrl,\n//   prepareHeaders: (headers, { getState }) => {\n//     // Try Redux state first, then fallback to localStorage\n//     let token: string | null = (getState as typeof store.getState)().authentication?.token;\n//     if (!token && typeof window !== \"undefined\") {\n//       token = localStorage.getItem(\"token\");\n//     }\n//     if (typeof token === 'string' && token) {\n//       headers.set(\"Authorization\", `Bearer ${token}`);\n//     }\n//     return headers;\n//   },\n// });\n// export const fetchbase: BaseQueryFn<\n//   string | FetchArgs,\n//   unknown,\n//   FetchBaseQueryError\n// > = async (args, api, extraOptions) => {\n//   debugger\n//   // wait until the mutex is available without locking it\n//   await mutex.waitForUnlock();\n//   let result = await baseQuery(args, api, extraOptions);\n//   if (result?.error && result.error.status === 401) {\n//     // checking whether the mutex is locked\n//     // localStorage.removeItem(\"authenticationToken\");\n//     localStorage.removeItem(\"token\")\n//     store.dispatch(authenticationSlice.actions.logout());\n//     if (!mutex.isLocked()) {\n//     } else {\n//       // wait until the mutex is available without locking it\n//       await mutex.waitForUnlock();\n//       result = await baseQuery(args, api, extraOptions);\n//     }\n//   } else if (result.error && result.error.status) {\n//     let msg = getFirstErrorFromObject(result.error.data);\n//     if (!msg) {\n//       msg = `Error ${result.error.status}: Unknown error`;\n//     }\n//     if (!(result.error.data instanceof Blob)) {\n//       // toast.error(msg);\n//       console.error(msg);\n//     }\n//     // Always return a consistent error object\n//     return { error: msg, status: result.error.status };\n//   }\n//   return result;\n// };\n// function getFirstErrorFromObject(obj: any) {\n//   if (obj?.detail) {\n//     if (Array.isArray(obj.detail)) {\n//       const eItem = obj.detail[0];\n//       if (eItem) {\n//         return `${eItem.msg}`;\n//       }\n//     } else if (obj.detail) {\n//       return obj.detail.toString();\n//     }\n//   }\n// }\n\n\n\n\n// import { useToaster } from \"../context/use-toaster\";\n// Base URL\nconst apiBaseUrl = \"http://localhost:5000\";\nconst baseUrl = \"\".concat(apiBaseUrl);\n// Mutex to handle concurrent requests\nconst mutex = new async_mutex__WEBPACK_IMPORTED_MODULE_0__.Mutex();\n// const { addNotification } = useToaster()\nconst baseQuery = (0,_reduxjs_toolkit_query__WEBPACK_IMPORTED_MODULE_3__.fetchBaseQuery)({\n    baseUrl,\n    prepareHeaders: (headers, param)=>{\n        let { getState } = param;\n        var _getState_authentication;\n        let token = (_getState_authentication = getState().authentication) === null || _getState_authentication === void 0 ? void 0 : _getState_authentication.token;\n        // Fallback to localStorage\n        if (!token && \"object\" !== \"undefined\") {\n            token = localStorage.getItem(\"token\");\n        }\n        if (token) {\n            headers.set(\"Authorization\", \"Bearer \".concat(token));\n        }\n        return headers;\n    }\n});\n/**\n * Centralized Error Handling Function\n */ const handleError = (errorData, status)=>{\n    let errorMessage = \"An unknown error occurred.\";\n    if (errorData) {\n        if (errorData.detail) {\n            if (Array.isArray(errorData.detail)) {\n                var _errorData_detail_;\n                errorMessage = ((_errorData_detail_ = errorData.detail[0]) === null || _errorData_detail_ === void 0 ? void 0 : _errorData_detail_.msg) || errorMessage;\n            } else {\n                errorMessage = errorData.detail.toString();\n            }\n        } else if (typeof errorData === \"string\") {\n            errorMessage = errorData;\n        }\n    }\n    console.error(\"Error \".concat(status, \": \").concat(errorMessage));\n    // addNotification({\n    //   message: `${errorMessage}`,\n    //   type: \"error\",\n    // })\n    // Dispatch error notification without blocking UI\n    setTimeout(()=>{\n        _store__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dispatch(_store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__.authenticationSlice.actions.setError({\n            message: errorMessage,\n            status\n        }));\n    }, 0);\n    return {\n        error: errorMessage,\n        status\n    };\n};\n/**\n * Enhanced BaseQuery with Mutex and Centralized Error Handling\n */ const fetchbase = async (args, api, extraOptions)=>{\n    await mutex.waitForUnlock(); // Ensure mutex is available\n    let result = await baseQuery(args, api, extraOptions);\n    if (result.error) {\n        const { status, data } = result.error;\n        if (status === 401) {\n            localStorage.removeItem(\"token\");\n            _store__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dispatch(_store_slices_auth_slice__WEBPACK_IMPORTED_MODULE_2__.authenticationSlice.actions.logout());\n            if (!mutex.isLocked()) {\n                await mutex.waitForUnlock();\n                result = await baseQuery(args, api, extraOptions);\n            }\n        }\n        // Handle other errors centrally\n        return handleError(data, status);\n    }\n    return result;\n}; // import {\n //   BaseQueryFn,\n //   FetchArgs,\n //   fetchBaseQuery,\n //   FetchBaseQueryError,\n //   BaseQueryApi,\n //   FetchBaseQueryMeta,\n // } from \"@reduxjs/toolkit/query\";\n // import { Mutex } from \"async-mutex\";\n // import store from \"../store\";\n // import { authenticationSlice } from \"../store/slices/auth.slice\";\n // // import { addNotificationExternal } from \"../utils/toast-external\";\n // import { useToaster } from \"../context/use-toaster\";\n // const apiBaseUrl = \"http://localhost:5000\";\n // const baseUrl = `${apiBaseUrl}`;\n // const mutex = new Mutex();\n // const { addNotification } = useToaster()\n // const baseQuery = fetchBaseQuery({\n //   baseUrl,\n //   prepareHeaders: (headers, { getState }) => {\n //     let token: string | null = (getState as typeof store.getState)().authentication?.token;\n //     if (!token && typeof window !== \"undefined\") {\n //       token = localStorage.getItem(\"token\");\n //     }\n //     if (token) {\n //       headers.set(\"Authorization\", `Bearer ${token}`);\n //     }\n //     return headers;\n //   },\n // });\n // const handleError = (errorData: any, status: number) => {\n //   let errorMessage = \"An unknown error occurred.\";\n //   if (errorData) {\n //     if (errorData.detail) {\n //       if (Array.isArray(errorData.detail)) {\n //         errorMessage = errorData.detail[0]?.msg || errorMessage;\n //       } else {\n //         errorMessage = errorData.detail.toString();\n //       }\n //     } else if (typeof errorData === \"string\") {\n //       errorMessage = errorData;\n //     }\n //   }\n //   console.error(`Error ${status}: ${errorMessage}`, errorData);\n //   addNotification({\n //     message: errorMessage,\n //     type: \"error\",\n //   });\n //   store.dispatch(authenticationSlice.actions.setError({ message: errorMessage, status }));\n //   // Return error in correct shape expected by RTK Query\n //   return {\n //     error: {\n //       status,\n //       data: errorData ?? errorMessage,\n //     } as FetchBaseQueryError,\n //   };\n // };\n // export const fetchbase: BaseQueryFn<\n //   string | FetchArgs,\n //   unknown,\n //   FetchBaseQueryError\n // > = async (args, api, extraOptions) => {\n //   await mutex.waitForUnlock();\n //   let result = await baseQuery(args, api, extraOptions);\n //   if (result.error) {\n //     const { status, data } = result.error;\n //     if (status === 401) {\n //       localStorage.removeItem(\"token\");\n //       store.dispatch(authenticationSlice.actions.logout());\n //       if (!mutex.isLocked()) {\n //         await mutex.waitForUnlock();\n //         result = await baseQuery(args, api, extraOptions);\n //       }\n //     }\n //     return handleError(data, status as number);\n //   }\n //   return result;\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi91dGlscy9hcGkudXRpbC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFdBQVc7QUFDWCxpQkFBaUI7QUFDakIsZUFBZTtBQUNmLG9CQUFvQjtBQUNwQix5QkFBeUI7QUFDekIsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3Qyx1Q0FBdUM7QUFDdkMsb0VBQW9FO0FBQ3BFLGdDQUFnQztBQUNoQyxvRUFBb0U7QUFDcEUsNkJBQTZCO0FBQzdCLDJDQUEyQztBQUUzQyxtQ0FBbUM7QUFLbkMscUNBQXFDO0FBQ3JDLGFBQWE7QUFDYixpREFBaUQ7QUFDakQsOERBQThEO0FBQzlELDhGQUE4RjtBQUM5RixxREFBcUQ7QUFDckQsK0NBQStDO0FBQy9DLFFBQVE7QUFDUixnREFBZ0Q7QUFDaEQseURBQXlEO0FBQ3pELFFBQVE7QUFDUixzQkFBc0I7QUFDdEIsT0FBTztBQUNQLE1BQU07QUFFTix1Q0FBdUM7QUFDdkMsd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYix3QkFBd0I7QUFDeEIsMkNBQTJDO0FBQzNDLGFBQWE7QUFDYiw0REFBNEQ7QUFDNUQsaUNBQWlDO0FBRWpDLDJEQUEyRDtBQUUzRCx3REFBd0Q7QUFDeEQsOENBQThDO0FBQzlDLHlEQUF5RDtBQUN6RCx1Q0FBdUM7QUFDdkMsNERBQTREO0FBQzVELCtCQUErQjtBQUMvQixlQUFlO0FBQ2YsZ0VBQWdFO0FBQ2hFLHFDQUFxQztBQUNyQywyREFBMkQ7QUFDM0QsUUFBUTtBQUNSLHNEQUFzRDtBQUN0RCw0REFBNEQ7QUFDNUQsa0JBQWtCO0FBQ2xCLDZEQUE2RDtBQUM3RCxRQUFRO0FBQ1Isa0RBQWtEO0FBQ2xELDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIsUUFBUTtBQUNSLGlEQUFpRDtBQUNqRCwwREFBMEQ7QUFDMUQsTUFBTTtBQUVOLG1CQUFtQjtBQUNuQixLQUFLO0FBQ0wsK0NBQStDO0FBQy9DLHVCQUF1QjtBQUN2Qix1Q0FBdUM7QUFDdkMscUNBQXFDO0FBQ3JDLHFCQUFxQjtBQUNyQixpQ0FBaUM7QUFDakMsVUFBVTtBQUNWLCtCQUErQjtBQUMvQixzQ0FBc0M7QUFDdEMsUUFBUTtBQUNSLE1BQU07QUFDTixJQUFJO0FBVTRCO0FBQ0k7QUFDUDtBQUNvQztBQUNqRSx1REFBdUQ7QUFFdkQsV0FBVztBQUNYLE1BQU1JLGFBQWE7QUFDbkIsTUFBTUMsVUFBVSxHQUFjLE9BQVhEO0FBRW5CLHNDQUFzQztBQUN0QyxNQUFNRSxRQUFRLElBQUlMLDhDQUFLQTtBQUV2QiwyQ0FBMkM7QUFHM0MsTUFBTU0sWUFBWVAsc0VBQWNBLENBQUM7SUFDL0JLO0lBQ0FHLGdCQUFnQixDQUFDQztZQUFTLEVBQUVDLFFBQVEsRUFBRTtZQUNUO1FBQTNCLElBQUlDLFNBQXVCLHNDQUFzQ0MsY0FBYyxjQUFwRCx3RUFBc0RELEtBQUs7UUFFdEYsMkJBQTJCO1FBQzNCLElBQUksQ0FBQ0EsU0FBUyxhQUFrQixhQUFhO1lBQzNDQSxRQUFRRSxhQUFhQyxPQUFPLENBQUM7UUFDL0I7UUFFQSxJQUFJSCxPQUFPO1lBQ1RGLFFBQVFNLEdBQUcsQ0FBQyxpQkFBaUIsVUFBZ0IsT0FBTko7UUFDekM7UUFFQSxPQUFPRjtJQUNUO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNELE1BQU1PLGNBQWMsQ0FBQ0MsV0FBZ0JDO0lBQ25DLElBQUlDLGVBQWU7SUFFbkIsSUFBSUYsV0FBVztRQUNiLElBQUlBLFVBQVVHLE1BQU0sRUFBRTtZQUNwQixJQUFJQyxNQUFNQyxPQUFPLENBQUNMLFVBQVVHLE1BQU0sR0FBRztvQkFDcEJIO2dCQUFmRSxlQUFlRixFQUFBQSxxQkFBQUEsVUFBVUcsTUFBTSxDQUFDLEVBQUUsY0FBbkJILHlDQUFBQSxtQkFBcUJNLEdBQUcsS0FBSUo7WUFDN0MsT0FBTztnQkFDTEEsZUFBZUYsVUFBVUcsTUFBTSxDQUFDSSxRQUFRO1lBQzFDO1FBQ0YsT0FBTyxJQUFJLE9BQU9QLGNBQWMsVUFBVTtZQUN4Q0UsZUFBZUY7UUFDakI7SUFDRjtJQUVBUSxRQUFRQyxLQUFLLENBQUMsU0FBb0JQLE9BQVhELFFBQU8sTUFBaUIsT0FBYkM7SUFDbEMsb0JBQW9CO0lBQ3BCLGdDQUFnQztJQUNoQyxtQkFBbUI7SUFDbkIsS0FBSztJQUVMLGtEQUFrRDtJQUNsRFEsV0FBVztRQUNUekIsOENBQUtBLENBQUMwQixRQUFRLENBQUN6Qix5RUFBbUJBLENBQUMwQixPQUFPLENBQUNDLFFBQVEsQ0FBQztZQUFFQyxTQUFTWjtZQUFjRDtRQUFPO0lBQ3RGLEdBQUc7SUFFSCxPQUFPO1FBQUVRLE9BQU9QO1FBQWNEO0lBQU87QUFDdkM7QUFFQTs7Q0FFQyxHQUNNLE1BQU1jLFlBQTJFLE9BQ3RGQyxNQUNBQyxLQUNBQztJQUVBLE1BQU03QixNQUFNOEIsYUFBYSxJQUFJLDRCQUE0QjtJQUV6RCxJQUFJQyxTQUFTLE1BQU05QixVQUFVMEIsTUFBTUMsS0FBS0M7SUFFeEMsSUFBSUUsT0FBT1gsS0FBSyxFQUFFO1FBQ2hCLE1BQU0sRUFBRVIsTUFBTSxFQUFFb0IsSUFBSSxFQUFFLEdBQUdELE9BQU9YLEtBQUs7UUFFckMsSUFBSVIsV0FBVyxLQUFLO1lBQ2xCTCxhQUFhMEIsVUFBVSxDQUFDO1lBQ3hCckMsOENBQUtBLENBQUMwQixRQUFRLENBQUN6Qix5RUFBbUJBLENBQUMwQixPQUFPLENBQUNXLE1BQU07WUFFakQsSUFBSSxDQUFDbEMsTUFBTW1DLFFBQVEsSUFBSTtnQkFDckIsTUFBTW5DLE1BQU04QixhQUFhO2dCQUN6QkMsU0FBUyxNQUFNOUIsVUFBVTBCLE1BQU1DLEtBQUtDO1lBQ3RDO1FBQ0Y7UUFFQSxnQ0FBZ0M7UUFDaEMsT0FBT25CLFlBQVlzQixNQUFNcEI7SUFDM0I7SUFFQSxPQUFPbUI7QUFDVCxFQUFFLENBSUYsV0FBVztDQUNYLGlCQUFpQjtDQUNqQixlQUFlO0NBQ2Ysb0JBQW9CO0NBQ3BCLHlCQUF5QjtDQUN6QixrQkFBa0I7Q0FDbEIsd0JBQXdCO0NBQ3hCLG1DQUFtQztDQUNuQyx1Q0FBdUM7Q0FDdkMsZ0NBQWdDO0NBQ2hDLG9FQUFvRTtDQUNwRSx3RUFBd0U7Q0FDeEUsdURBQXVEO0NBQ3ZELDhDQUE4QztDQUM5QyxtQ0FBbUM7Q0FFbkMsNkJBQTZCO0NBQzdCLDJDQUEyQztDQUUzQyxxQ0FBcUM7Q0FDckMsYUFBYTtDQUNiLGlEQUFpRDtDQUNqRCw4RkFBOEY7Q0FFOUYscURBQXFEO0NBQ3JELCtDQUErQztDQUMvQyxRQUFRO0NBRVIsbUJBQW1CO0NBQ25CLHlEQUF5RDtDQUN6RCxRQUFRO0NBRVIsc0JBQXNCO0NBQ3RCLE9BQU87Q0FDUCxNQUFNO0NBRU4sNERBQTREO0NBQzVELHFEQUFxRDtDQUVyRCxxQkFBcUI7Q0FDckIsOEJBQThCO0NBQzlCLCtDQUErQztDQUMvQyxtRUFBbUU7Q0FDbkUsaUJBQWlCO0NBQ2pCLHNEQUFzRDtDQUN0RCxVQUFVO0NBQ1Ysa0RBQWtEO0NBQ2xELGtDQUFrQztDQUNsQyxRQUFRO0NBQ1IsTUFBTTtDQUVOLGtFQUFrRTtDQUVsRSxzQkFBc0I7Q0FDdEIsNkJBQTZCO0NBQzdCLHFCQUFxQjtDQUNyQixRQUFRO0NBRVIsNkZBQTZGO0NBRTdGLDJEQUEyRDtDQUMzRCxhQUFhO0NBQ2IsZUFBZTtDQUNmLGdCQUFnQjtDQUNoQix5Q0FBeUM7Q0FDekMsZ0NBQWdDO0NBQ2hDLE9BQU87Q0FDUCxLQUFLO0NBRUwsdUNBQXVDO0NBQ3ZDLHdCQUF3QjtDQUN4QixhQUFhO0NBQ2Isd0JBQXdCO0NBQ3hCLDJDQUEyQztDQUMzQyxpQ0FBaUM7Q0FFakMsMkRBQTJEO0NBRTNELHdCQUF3QjtDQUN4Qiw2Q0FBNkM7Q0FFN0MsNEJBQTRCO0NBQzVCLDBDQUEwQztDQUMxQyw4REFBOEQ7Q0FFOUQsaUNBQWlDO0NBQ2pDLHVDQUF1QztDQUN2Qyw2REFBNkQ7Q0FDN0QsVUFBVTtDQUNWLFFBQVE7Q0FFUixrREFBa0Q7Q0FDbEQsTUFBTTtDQUVOLG1CQUFtQjtDQUNuQixLQUFLIiwic291cmNlcyI6WyJEOlxcdW56aXBcXGludlxcbGliXFx1dGlsc1xcYXBpLnV0aWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtcbi8vICAgQmFzZVF1ZXJ5Rm4sXG4vLyAgIEZldGNoQXJncyxcbi8vICAgZmV0Y2hCYXNlUXVlcnksXG4vLyAgIEZldGNoQmFzZVF1ZXJ5RXJyb3IsXG4vLyB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0L3F1ZXJ5XCI7XG4vLyAvLyBpbXBvcnQgeyB0b2FzdCB9IGZyb20gXCJyZWFjdC10b2FzdGlmeVwiO1xuLy8gaW1wb3J0IHsgTXV0ZXggfSBmcm9tIFwiYXN5bmMtbXV0ZXhcIjtcbi8vIC8vIGltcG9ydCB7IGFwaUJhc2VVcmwgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9jb25zdHMvQXBpVXJpQ29uc3RcIjtcbi8vIGltcG9ydCBzdG9yZSBmcm9tIFwiLi4vc3RvcmVcIjtcbi8vIGltcG9ydCB7IGF1dGhlbnRpY2F0aW9uU2xpY2UgfSBmcm9tIFwiLi4vc3RvcmUvc2xpY2VzL2F1dGguc2xpY2VcIjtcbi8vIGNvbnN0IG11dGV4ID0gbmV3IE11dGV4KCk7XG4vLyBjb25zdCBhcGlCYXNlVXJsPVwiaHR0cDovL2xvY2FsaG9zdDo1MDAwXCJcblxuLy8gY29uc3QgYmFzZVVybCA9IGAke2FwaUJhc2VVcmx9YDtcblxuXG5cblxuLy8gY29uc3QgYmFzZVF1ZXJ5ID0gZmV0Y2hCYXNlUXVlcnkoe1xuLy8gICBiYXNlVXJsLFxuLy8gICBwcmVwYXJlSGVhZGVyczogKGhlYWRlcnMsIHsgZ2V0U3RhdGUgfSkgPT4ge1xuLy8gICAgIC8vIFRyeSBSZWR1eCBzdGF0ZSBmaXJzdCwgdGhlbiBmYWxsYmFjayB0byBsb2NhbFN0b3JhZ2Vcbi8vICAgICBsZXQgdG9rZW46IHN0cmluZyB8IG51bGwgPSAoZ2V0U3RhdGUgYXMgdHlwZW9mIHN0b3JlLmdldFN0YXRlKSgpLmF1dGhlbnRpY2F0aW9uPy50b2tlbjtcbi8vICAgICBpZiAoIXRva2VuICYmIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbi8vICAgICAgIHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcbi8vICAgICB9XG4vLyAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgJiYgdG9rZW4pIHtcbi8vICAgICAgIGhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dG9rZW59YCk7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiBoZWFkZXJzO1xuLy8gICB9LFxuLy8gfSk7XG5cbi8vIGV4cG9ydCBjb25zdCBmZXRjaGJhc2U6IEJhc2VRdWVyeUZuPFxuLy8gICBzdHJpbmcgfCBGZXRjaEFyZ3MsXG4vLyAgIHVua25vd24sXG4vLyAgIEZldGNoQmFzZVF1ZXJ5RXJyb3Jcbi8vID4gPSBhc3luYyAoYXJncywgYXBpLCBleHRyYU9wdGlvbnMpID0+IHtcbi8vICAgZGVidWdnZXJcbi8vICAgLy8gd2FpdCB1bnRpbCB0aGUgbXV0ZXggaXMgYXZhaWxhYmxlIHdpdGhvdXQgbG9ja2luZyBpdFxuLy8gICBhd2FpdCBtdXRleC53YWl0Rm9yVW5sb2NrKCk7XG5cbi8vICAgbGV0IHJlc3VsdCA9IGF3YWl0IGJhc2VRdWVyeShhcmdzLCBhcGksIGV4dHJhT3B0aW9ucyk7XG5cbi8vICAgaWYgKHJlc3VsdD8uZXJyb3IgJiYgcmVzdWx0LmVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4vLyAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgbXV0ZXggaXMgbG9ja2VkXG4vLyAgICAgLy8gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhdXRoZW50aWNhdGlvblRva2VuXCIpO1xuLy8gICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidG9rZW5cIilcbi8vICAgICBzdG9yZS5kaXNwYXRjaChhdXRoZW50aWNhdGlvblNsaWNlLmFjdGlvbnMubG9nb3V0KCkpO1xuLy8gICAgIGlmICghbXV0ZXguaXNMb2NrZWQoKSkge1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAvLyB3YWl0IHVudGlsIHRoZSBtdXRleCBpcyBhdmFpbGFibGUgd2l0aG91dCBsb2NraW5nIGl0XG4vLyAgICAgICBhd2FpdCBtdXRleC53YWl0Rm9yVW5sb2NrKCk7XG4vLyAgICAgICByZXN1bHQgPSBhd2FpdCBiYXNlUXVlcnkoYXJncywgYXBpLCBleHRyYU9wdGlvbnMpO1xuLy8gICAgIH1cbi8vICAgfSBlbHNlIGlmIChyZXN1bHQuZXJyb3IgJiYgcmVzdWx0LmVycm9yLnN0YXR1cykge1xuLy8gICAgIGxldCBtc2cgPSBnZXRGaXJzdEVycm9yRnJvbU9iamVjdChyZXN1bHQuZXJyb3IuZGF0YSk7XG4vLyAgICAgaWYgKCFtc2cpIHtcbi8vICAgICAgIG1zZyA9IGBFcnJvciAke3Jlc3VsdC5lcnJvci5zdGF0dXN9OiBVbmtub3duIGVycm9yYDtcbi8vICAgICB9XG4vLyAgICAgaWYgKCEocmVzdWx0LmVycm9yLmRhdGEgaW5zdGFuY2VvZiBCbG9iKSkge1xuLy8gICAgICAgLy8gdG9hc3QuZXJyb3IobXNnKTtcbi8vICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbi8vICAgICB9XG4vLyAgICAgLy8gQWx3YXlzIHJldHVybiBhIGNvbnNpc3RlbnQgZXJyb3Igb2JqZWN0XG4vLyAgICAgcmV0dXJuIHsgZXJyb3I6IG1zZywgc3RhdHVzOiByZXN1bHQuZXJyb3Iuc3RhdHVzIH07XG4vLyAgIH1cblxuLy8gICByZXR1cm4gcmVzdWx0O1xuLy8gfTtcbi8vIGZ1bmN0aW9uIGdldEZpcnN0RXJyb3JGcm9tT2JqZWN0KG9iajogYW55KSB7XG4vLyAgIGlmIChvYmo/LmRldGFpbCkge1xuLy8gICAgIGlmIChBcnJheS5pc0FycmF5KG9iai5kZXRhaWwpKSB7XG4vLyAgICAgICBjb25zdCBlSXRlbSA9IG9iai5kZXRhaWxbMF07XG4vLyAgICAgICBpZiAoZUl0ZW0pIHtcbi8vICAgICAgICAgcmV0dXJuIGAke2VJdGVtLm1zZ31gO1xuLy8gICAgICAgfVxuLy8gICAgIH0gZWxzZSBpZiAob2JqLmRldGFpbCkge1xuLy8gICAgICAgcmV0dXJuIG9iai5kZXRhaWwudG9TdHJpbmcoKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH1cblxuXG5cblxuaW1wb3J0IHtcbiAgQmFzZVF1ZXJ5Rm4sXG4gIEZldGNoQXJncyxcbiAgZmV0Y2hCYXNlUXVlcnksXG4gIEZldGNoQmFzZVF1ZXJ5RXJyb3IsXG59IGZyb20gXCJAcmVkdXhqcy90b29sa2l0L3F1ZXJ5XCI7XG5pbXBvcnQgeyBNdXRleCB9IGZyb20gXCJhc3luYy1tdXRleFwiO1xuaW1wb3J0IHN0b3JlIGZyb20gXCIuLi9zdG9yZVwiO1xuaW1wb3J0IHsgYXV0aGVudGljYXRpb25TbGljZSB9IGZyb20gXCIuLi9zdG9yZS9zbGljZXMvYXV0aC5zbGljZVwiO1xuLy8gaW1wb3J0IHsgdXNlVG9hc3RlciB9IGZyb20gXCIuLi9jb250ZXh0L3VzZS10b2FzdGVyXCI7XG5cbi8vIEJhc2UgVVJMXG5jb25zdCBhcGlCYXNlVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjUwMDBcIjtcbmNvbnN0IGJhc2VVcmwgPSBgJHthcGlCYXNlVXJsfWA7XG5cbi8vIE11dGV4IHRvIGhhbmRsZSBjb25jdXJyZW50IHJlcXVlc3RzXG5jb25zdCBtdXRleCA9IG5ldyBNdXRleCgpO1xuXG4vLyBjb25zdCB7IGFkZE5vdGlmaWNhdGlvbiB9ID0gdXNlVG9hc3RlcigpXG5cblxuY29uc3QgYmFzZVF1ZXJ5ID0gZmV0Y2hCYXNlUXVlcnkoe1xuICBiYXNlVXJsLFxuICBwcmVwYXJlSGVhZGVyczogKGhlYWRlcnMsIHsgZ2V0U3RhdGUgfSkgPT4ge1xuICAgIGxldCB0b2tlbjogc3RyaW5nIHwgbnVsbCA9IChnZXRTdGF0ZSBhcyB0eXBlb2Ygc3RvcmUuZ2V0U3RhdGUpKCkuYXV0aGVudGljYXRpb24/LnRva2VuO1xuXG4gICAgLy8gRmFsbGJhY2sgdG8gbG9jYWxTdG9yYWdlXG4gICAgaWYgKCF0b2tlbiAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIik7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBoZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke3Rva2VufWApO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9LFxufSk7XG5cbi8qKlxuICogQ2VudHJhbGl6ZWQgRXJyb3IgSGFuZGxpbmcgRnVuY3Rpb25cbiAqL1xuY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyb3JEYXRhOiBhbnksIHN0YXR1czogbnVtYmVyKSA9PiB7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuXCI7XG5cbiAgaWYgKGVycm9yRGF0YSkge1xuICAgIGlmIChlcnJvckRhdGEuZGV0YWlsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlcnJvckRhdGEuZGV0YWlsKSkge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvckRhdGEuZGV0YWlsWzBdPy5tc2cgfHwgZXJyb3JNZXNzYWdlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhLmRldGFpbC50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yRGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhO1xuICAgIH1cbiAgfVxuXG4gIGNvbnNvbGUuZXJyb3IoYEVycm9yICR7c3RhdHVzfTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gIC8vIGFkZE5vdGlmaWNhdGlvbih7XG4gIC8vICAgbWVzc2FnZTogYCR7ZXJyb3JNZXNzYWdlfWAsXG4gIC8vICAgdHlwZTogXCJlcnJvclwiLFxuICAvLyB9KVxuXG4gIC8vIERpc3BhdGNoIGVycm9yIG5vdGlmaWNhdGlvbiB3aXRob3V0IGJsb2NraW5nIFVJXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoKGF1dGhlbnRpY2F0aW9uU2xpY2UuYWN0aW9ucy5zZXRFcnJvcih7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSwgc3RhdHVzIH0pKTtcbiAgfSwgMCk7XG5cbiAgcmV0dXJuIHsgZXJyb3I6IGVycm9yTWVzc2FnZSwgc3RhdHVzIH07XG59O1xuXG4vKipcbiAqIEVuaGFuY2VkIEJhc2VRdWVyeSB3aXRoIE11dGV4IGFuZCBDZW50cmFsaXplZCBFcnJvciBIYW5kbGluZ1xuICovXG5leHBvcnQgY29uc3QgZmV0Y2hiYXNlOiBCYXNlUXVlcnlGbjxzdHJpbmcgfCBGZXRjaEFyZ3MsIHVua25vd24sIEZldGNoQmFzZVF1ZXJ5RXJyb3I+ID0gYXN5bmMgKFxuICBhcmdzLFxuICBhcGksXG4gIGV4dHJhT3B0aW9uc1xuKSA9PiB7XG4gIGF3YWl0IG11dGV4LndhaXRGb3JVbmxvY2soKTsgLy8gRW5zdXJlIG11dGV4IGlzIGF2YWlsYWJsZVxuXG4gIGxldCByZXN1bHQgPSBhd2FpdCBiYXNlUXVlcnkoYXJncywgYXBpLCBleHRyYU9wdGlvbnMpO1xuXG4gIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgZGF0YSB9ID0gcmVzdWx0LmVycm9yO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInRva2VuXCIpO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goYXV0aGVudGljYXRpb25TbGljZS5hY3Rpb25zLmxvZ291dCgpKTtcblxuICAgICAgaWYgKCFtdXRleC5pc0xvY2tlZCgpKSB7XG4gICAgICAgIGF3YWl0IG11dGV4LndhaXRGb3JVbmxvY2soKTtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgYmFzZVF1ZXJ5KGFyZ3MsIGFwaSwgZXh0cmFPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgb3RoZXIgZXJyb3JzIGNlbnRyYWxseVxuICAgIHJldHVybiBoYW5kbGVFcnJvcihkYXRhLCBzdGF0dXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLyBpbXBvcnQge1xuLy8gICBCYXNlUXVlcnlGbixcbi8vICAgRmV0Y2hBcmdzLFxuLy8gICBmZXRjaEJhc2VRdWVyeSxcbi8vICAgRmV0Y2hCYXNlUXVlcnlFcnJvcixcbi8vICAgQmFzZVF1ZXJ5QXBpLFxuLy8gICBGZXRjaEJhc2VRdWVyeU1ldGEsXG4vLyB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0L3F1ZXJ5XCI7XG4vLyBpbXBvcnQgeyBNdXRleCB9IGZyb20gXCJhc3luYy1tdXRleFwiO1xuLy8gaW1wb3J0IHN0b3JlIGZyb20gXCIuLi9zdG9yZVwiO1xuLy8gaW1wb3J0IHsgYXV0aGVudGljYXRpb25TbGljZSB9IGZyb20gXCIuLi9zdG9yZS9zbGljZXMvYXV0aC5zbGljZVwiO1xuLy8gLy8gaW1wb3J0IHsgYWRkTm90aWZpY2F0aW9uRXh0ZXJuYWwgfSBmcm9tIFwiLi4vdXRpbHMvdG9hc3QtZXh0ZXJuYWxcIjtcbi8vIGltcG9ydCB7IHVzZVRvYXN0ZXIgfSBmcm9tIFwiLi4vY29udGV4dC91c2UtdG9hc3RlclwiO1xuLy8gY29uc3QgYXBpQmFzZVVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwXCI7XG4vLyBjb25zdCBiYXNlVXJsID0gYCR7YXBpQmFzZVVybH1gO1xuXG4vLyBjb25zdCBtdXRleCA9IG5ldyBNdXRleCgpO1xuLy8gY29uc3QgeyBhZGROb3RpZmljYXRpb24gfSA9IHVzZVRvYXN0ZXIoKVxuXG4vLyBjb25zdCBiYXNlUXVlcnkgPSBmZXRjaEJhc2VRdWVyeSh7XG4vLyAgIGJhc2VVcmwsXG4vLyAgIHByZXBhcmVIZWFkZXJzOiAoaGVhZGVycywgeyBnZXRTdGF0ZSB9KSA9PiB7XG4vLyAgICAgbGV0IHRva2VuOiBzdHJpbmcgfCBudWxsID0gKGdldFN0YXRlIGFzIHR5cGVvZiBzdG9yZS5nZXRTdGF0ZSkoKS5hdXRoZW50aWNhdGlvbj8udG9rZW47XG5cbi8vICAgICBpZiAoIXRva2VuICYmIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbi8vICAgICAgIHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcbi8vICAgICB9XG5cbi8vICAgICBpZiAodG9rZW4pIHtcbi8vICAgICAgIGhlYWRlcnMuc2V0KFwiQXV0aG9yaXphdGlvblwiLCBgQmVhcmVyICR7dG9rZW59YCk7XG4vLyAgICAgfVxuXG4vLyAgICAgcmV0dXJuIGhlYWRlcnM7XG4vLyAgIH0sXG4vLyB9KTtcblxuLy8gY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyb3JEYXRhOiBhbnksIHN0YXR1czogbnVtYmVyKSA9PiB7XG4vLyAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuXCI7XG5cbi8vICAgaWYgKGVycm9yRGF0YSkge1xuLy8gICAgIGlmIChlcnJvckRhdGEuZGV0YWlsKSB7XG4vLyAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlcnJvckRhdGEuZGV0YWlsKSkge1xuLy8gICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvckRhdGEuZGV0YWlsWzBdPy5tc2cgfHwgZXJyb3JNZXNzYWdlO1xuLy8gICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhLmRldGFpbC50b1N0cmluZygpO1xuLy8gICAgICAgfVxuLy8gICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yRGF0YSA9PT0gXCJzdHJpbmdcIikge1xuLy8gICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhO1xuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIGNvbnNvbGUuZXJyb3IoYEVycm9yICR7c3RhdHVzfTogJHtlcnJvck1lc3NhZ2V9YCwgZXJyb3JEYXRhKTtcblxuLy8gICBhZGROb3RpZmljYXRpb24oe1xuLy8gICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbi8vICAgICB0eXBlOiBcImVycm9yXCIsXG4vLyAgIH0pO1xuXG4vLyAgIHN0b3JlLmRpc3BhdGNoKGF1dGhlbnRpY2F0aW9uU2xpY2UuYWN0aW9ucy5zZXRFcnJvcih7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSwgc3RhdHVzIH0pKTtcblxuLy8gICAvLyBSZXR1cm4gZXJyb3IgaW4gY29ycmVjdCBzaGFwZSBleHBlY3RlZCBieSBSVEsgUXVlcnlcbi8vICAgcmV0dXJuIHtcbi8vICAgICBlcnJvcjoge1xuLy8gICAgICAgc3RhdHVzLFxuLy8gICAgICAgZGF0YTogZXJyb3JEYXRhID8/IGVycm9yTWVzc2FnZSxcbi8vICAgICB9IGFzIEZldGNoQmFzZVF1ZXJ5RXJyb3IsXG4vLyAgIH07XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgZmV0Y2hiYXNlOiBCYXNlUXVlcnlGbjxcbi8vICAgc3RyaW5nIHwgRmV0Y2hBcmdzLFxuLy8gICB1bmtub3duLFxuLy8gICBGZXRjaEJhc2VRdWVyeUVycm9yXG4vLyA+ID0gYXN5bmMgKGFyZ3MsIGFwaSwgZXh0cmFPcHRpb25zKSA9PiB7XG4vLyAgIGF3YWl0IG11dGV4LndhaXRGb3JVbmxvY2soKTtcblxuLy8gICBsZXQgcmVzdWx0ID0gYXdhaXQgYmFzZVF1ZXJ5KGFyZ3MsIGFwaSwgZXh0cmFPcHRpb25zKTtcblxuLy8gICBpZiAocmVzdWx0LmVycm9yKSB7XG4vLyAgICAgY29uc3QgeyBzdGF0dXMsIGRhdGEgfSA9IHJlc3VsdC5lcnJvcjtcblxuLy8gICAgIGlmIChzdGF0dXMgPT09IDQwMSkge1xuLy8gICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ0b2tlblwiKTtcbi8vICAgICAgIHN0b3JlLmRpc3BhdGNoKGF1dGhlbnRpY2F0aW9uU2xpY2UuYWN0aW9ucy5sb2dvdXQoKSk7XG5cbi8vICAgICAgIGlmICghbXV0ZXguaXNMb2NrZWQoKSkge1xuLy8gICAgICAgICBhd2FpdCBtdXRleC53YWl0Rm9yVW5sb2NrKCk7XG4vLyAgICAgICAgIHJlc3VsdCA9IGF3YWl0IGJhc2VRdWVyeShhcmdzLCBhcGksIGV4dHJhT3B0aW9ucyk7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuXG4vLyAgICAgcmV0dXJuIGhhbmRsZUVycm9yKGRhdGEsIHN0YXR1cyBhcyBudW1iZXIpO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIHJlc3VsdDtcbi8vIH07XG4iXSwibmFtZXMiOlsiZmV0Y2hCYXNlUXVlcnkiLCJNdXRleCIsInN0b3JlIiwiYXV0aGVudGljYXRpb25TbGljZSIsImFwaUJhc2VVcmwiLCJiYXNlVXJsIiwibXV0ZXgiLCJiYXNlUXVlcnkiLCJwcmVwYXJlSGVhZGVycyIsImhlYWRlcnMiLCJnZXRTdGF0ZSIsInRva2VuIiwiYXV0aGVudGljYXRpb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0IiwiaGFuZGxlRXJyb3IiLCJlcnJvckRhdGEiLCJzdGF0dXMiLCJlcnJvck1lc3NhZ2UiLCJkZXRhaWwiLCJBcnJheSIsImlzQXJyYXkiLCJtc2ciLCJ0b1N0cmluZyIsImNvbnNvbGUiLCJlcnJvciIsInNldFRpbWVvdXQiLCJkaXNwYXRjaCIsImFjdGlvbnMiLCJzZXRFcnJvciIsIm1lc3NhZ2UiLCJmZXRjaGJhc2UiLCJhcmdzIiwiYXBpIiwiZXh0cmFPcHRpb25zIiwid2FpdEZvclVubG9jayIsInJlc3VsdCIsImRhdGEiLCJyZW1vdmVJdGVtIiwibG9nb3V0IiwiaXNMb2NrZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils/api.util.ts\n"));

/***/ })

});